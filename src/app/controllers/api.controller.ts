import {
  Context, Delete, Get, HttpResponseCreated, HttpResponseNoContent,
  HttpResponseNotFound, HttpResponseOK, Post, ValidateBody, ValidateParams
} from '@foal/core';
import { TodosBodyValidator, TodosParamsValidator } from '../validators/todos';
import { getRepository } from 'typeorm';
import { Todo } from '../entities/todo.entity';

export class ApiController {

  @Get('/todos')
  async getTodos() {
    return new HttpResponseOK(await getRepository(Todo).find());
  }

  @Post('/todos')
  @ValidateBody(TodosBodyValidator)
  async postTodo(ctx: Context) {
    // Create a new todo with the body of the HTTP request.
    const todo = new Todo();
    todo.text = ctx.request.body.text;

    // Save the todo in the database.
    await getRepository(Todo).save(todo);

    // Return the new todo with the id generated by the database. The status is 201.
    return new HttpResponseCreated(todo);
  }

  @Delete('/todos/:id')
  @ValidateParams(TodosParamsValidator)
  async deleteTodo(ctx: Context) {
    // Get the todo with the id given in the URL if it exists.
    const todo = await getRepository(Todo).findOne({ id: parseInt(ctx.request.params.id, 10) });

    // Return a 404 Not Found response if no such todo exists.
    if (!todo) {
      return new HttpResponseNotFound();
    }

    // Remove the todo from the database.
    await getRepository(Todo).remove(todo);

    // Returns an successful empty response. The status is 204.
    return new HttpResponseNoContent();
  }

}
